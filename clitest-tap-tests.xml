<?xml version="1.0" encoding="UTF-8"?>
<test-suite description="Test the core features of clitest.py">
  <!-- These tests use the tap reporter because it's the easiest to parse,
       which lets us focus on the behavior more than the output -->
  <test-cases>

    <test-case description="Should exit 0 and report a pass for a valid, passing suite">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-pass.xml</arg>
      </args>
      <expect>
        <stdout match="contains">ok 1 - A basic passing test</stdout>
        <exit_code>0</exit_code>
      </expect>
    </test-case>

    <test-case description="Should exit 1 and report a failure for a valid, failing suite">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-fail.xml</arg>
      </args>
      <expect>
        <stdout match="contains">not ok 1 - A basic failing test</stdout>
        <exit_code>1</exit_code>
      </expect>
    </test-case>

    <test-case description="Should correctly process the 'normalize' attribute">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-normalize.xml</arg>
      </args>
      <expect>
        <stdout match="contains">ok 1 - Valid normalization</stdout>
        <exit_code>0</exit_code>
      </expect>
    </test-case>

    <test-case description="Should correctly process an invalid 'normalize' attribute">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-normalize-invalid.xml</arg>
      </args>
      <expect>
        <stderr match="contains">&lt;stdout&gt; has invalid 'normalize' keyword(s): ['foo']</stderr>
        <exit_code>2</exit_code>
      </expect>
    </test-case>

    <test-case description="Should correctly process the 'match=regex' attribute">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-regex.xml</arg>
      </args>
      <expect>
        <stdout match="contains">ok 1 - Regex match test</stdout>
        <exit_code>0</exit_code>
      </expect>
    </test-case>

    <test-case description="Should correctly apply environment variables to subprocesses">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-env-var.xml</arg>
      </args>
      <expect>
        <stdout match="contains">ok 1 - Environment variable test</stdout>
        <exit_code>0</exit_code>
      </expect>
    </test-case>
    
    <test-case description="Should fail gracefully if the suite file is not found">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>non-existent-suite.xml</arg>
      </args>
      <expect>
        <stderr match="contains">Error: File not found</stderr>
        <exit_code>2</exit_code>
      </expect>
    </test-case>

    <test-case description="Should fail gracefully if the suite file is invalid XML">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>suites/suite-invalid.xml</arg>
      </args>
      <expect>
        <stderr match="regex">(?s)Error: Validation failed for suite 'suites/suite-invalid.xml':.*- XML is not well-formed: mismatched tag: line 8, column 2</stderr>
        <exit_code>2</exit_code>
      </expect>
    </test-case>

    <test-case description="Should show a usage error when no arguments are given">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
      </args>
      <expect>
        <stderr match="contains">error: the following arguments are required: SUITE</stderr>
        <exit_code>2</exit_code>
      </expect>
    </test-case>

    <test-case description="Should produce valid TAP subtest output for multiple suites">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-pass.xml</arg>
        <arg>suites/suite-fail.xml</arg>
      </args>
      <expect>
        <!-- 
          This regex checks for the key structural elements of a multi-suite run:
          - The main plan `1..2`
          - An `ok 1` line for the first suite
          - A `not ok 2` line for the second suite
          The `(?s)` flag allows `.` to match newlines, making the pattern resilient.
        -->
        <stdout match="regex">(?s)1..2.*ok 1 - .*not ok 2 - </stdout>
        <exit_code>1</exit_code>
      </expect>
    </test-case>

    <test-case description="Should produce verbose output with --verbose flag">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>--verbose</arg>
        <arg>suites/suite-pass.xml</arg>
      </args>
      <expect>
        <!-- The normal TAP output still goes to stdout -->
        <stdout match="contains">ok 1 - A basic passing test</stdout>
        <!-- The verbose diagnostics go to stderr -->
        <stderr match="contains"># Executing case: A basic passing test</stderr>
        <exit_code>0</exit_code>
      </expect>
    </test-case>

    <test-case description="Should show usage error for mutually exclusive flags --verbose and --quiet">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--verbose</arg>
        <arg>--quiet</arg>
        <arg>suites/suite-pass.xml</arg>
      </args>
      <expect>
        <!-- Argparse outputs a specific error for mutually exclusive options -->
        <stderr match="contains">not allowed with argument</stderr>
        <!-- The exit code for a usage error is 2 -->
        <exit_code>2</exit_code>
      </expect>
    </test-case>

    <test-case description="Should list tests with --list-cases flag and not run them">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--list-cases</arg>
        <arg>suites/suite-pass.xml</arg>
        <arg>suites/suite-fail.xml</arg>
      </args>
      <expect>
        <!-- 
          The output should be a human-readable list, not TAP.
          This regex checks for the presence of both suite headers and their test cases.
          The (?s) flag lets '.' match newlines, making the check flexible.
        -->
        <stdout match="regex"><![CDATA[(?s)The following tests would be run:.*Suite: suites/suite-pass.xml.*- A basic passing test.*Suite: suites/suite-fail.xml.*- A basic failing test]]></stdout>
        <exit_code>0</exit_code>
      </expect>
    </test-case>

    <test-case description="Should correctly handle the stdin tag">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-stdin.xml</arg>
      </args>
      <expect>
        <stdout match="contains">ok 1 - Should echo stdin to stdout</stdout>
        <exit_code>0</exit_code>
      </expect>
    </test-case>

    <test-case description="Should report a timeout failure correctly in TAP format">
      <command>python3</command>
      <args>
        <arg>clitest.py</arg>
        <arg>--reporter</arg>
        <arg>tap</arg>
        <arg>suites/suite-timeout.xml</arg>
      </args>
      <expect>
        <!-- FIX: Check stdout for the diagnostic message, not stderr, using a more robust regex -->
        <stdout match="regex"><![CDATA[(?s)not ok 1 - A test that should time out.*?---.*?message: "Test command timed out"]]></stdout>
        <exit_code>1</exit_code>
      </expect>
    </test-case>

  </test-cases>
</test-suite>
